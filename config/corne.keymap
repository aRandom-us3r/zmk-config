#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <38 39>;
        };

        combo_lparen {
            bindings = <&open_stack>;
            key-positions = <32 33>;
            layers = <0>;
        };

        combo_rparen {
            bindings = <&close_stack>;
            key-positions = <34 33>;
            layers = <0>;
        };

        combo_one {
            bindings = <&mm_1>;
            key-positions = <1 0>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_two {
            bindings = <&mm_2>;
            key-positions = <1 2>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_three {
            bindings = <&mm_3>;
            key-positions = <2 3>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_four {
            bindings = <&mm_4>;
            key-positions = <3 4>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_five {
            bindings = <&mm_5>;
            key-positions = <4 5>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_six {
            bindings = <&mm_6>;
            key-positions = <6 7>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_seven {
            bindings = <&mm_7>;
            key-positions = <7 8>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_eight {
            bindings = <&mm_8>;
            key-positions = <8 9>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_nine {
            bindings = <&mm_9>;
            key-positions = <9 10>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_zero {
            bindings = <&mm_0>;
            key-positions = <10 11>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <200>;
        };
    };

    behaviors {
        open_stack: open_stack {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LGUI)>;
        };

        close_stack: close_stack {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RSFT)>;
        };

        krp_tap: krp_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <175>;
            global-quick-tap;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            global-quick-tap;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        mm_1: mm_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_1";
            bindings = <&kp NUMBER_1>, <&kp F1>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        mm_2: mm_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_2";
            bindings = <&kp NUMBER_2>, <&kp F2>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        mm_3: mm_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_3";
            bindings = <&kp NUMBER_3>, <&kp F3>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        mm_4: mm_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_4";
            bindings = <&kp NUMBER_4>, <&kp F4>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        mm_5: mm_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_5";
            bindings = <&kp NUMBER_5>, <&kp F5>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        mm_6: mm_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_6";
            bindings = <&kp NUMBER_6>, <&kp F6>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        mm_7: mm_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_7";
            bindings = <&kp NUMBER_7>, <&kp F7>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        mm_8: mm_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_8";
            bindings = <&kp NUMBER_8>, <&kp F8>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        mm_9: mm_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_9";
            bindings = <&kp NUMBER_9>, <&kp F9>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        mm_0: mm_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_0";
            bindings = <&kp NUMBER_0>, <&kp F10>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_layer {
            bindings = <
&kp TAB              &kp Q         &kp W        &kp F               &kp P         &kp B        &kp J           &kp L         &kp U        &kp Y    &kp SQT   &kp EQUAL
&kp ESC              &hml LMETA A  &hml LALT R  &hml LCTRL S        &hml LSHFT T  &kp G        &kp M           &kp N         &kp E        &kp I    &kp O     &kp SEMI
&hml LEFT_ALT GRAVE  &kp Z         &kp X        &kp C               &kp D         &kp V        &kp K           &kp H         &kp COMMA    &kp DOT  &kp FSLH  &kp BSLH
                                                &mt LEFT_WIN ENTER  &lt 3 TAB     &kp SPACE    &mt RSHFT BSPC  &krp_tap 4 0  &lt 3 MINUS
            >;

            display-name = "Colemak";
        };

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB       &kp Q  &kp W  &kp E  &kp R  &kp T    &kp Y  &kp U  &kp I      &kp O    &kp P     &kp LBKT
&kp LCTRL     &kp A  &kp S  &kp D  &kp F  &kp G    &kp H  &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_ALT  &kp Z  &kp X  &kp C  &kp V  &kp B    &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &to 0
                            &kp C  &kp V  &kp B    &kp N  &kp M  &kp COMMA
            >;
        };

        gaming_layer {
            bindings = <
&kp ESC  &kp TAB     &kp Q   &kp W      &kp E     &kp R        &kp T   &kp Y   &kp U   &kp I  &kp O  &kp P
&kp N5   &kp LSHIFT  &kp A   &kp S      &kp D     &kp F        &kp G   &trans  &trans  &kp N  &kp M  &trans
&kp N6   &kp LCTRL   &kp N1  &kp N2     &kp N3    &kp N4       &kp Z   &kp X   &kp C   &kp V  &kp B  &to 0
                             &kp LSHFT  &kp LALT  &kp SPACE    &trans  &trans  &mo 0
            >;

            display-name = "Gaming";
        };

        lower_layer {
            display-name = "Lower";
            bindings = <
&trans  &trans     &mkp RCLK       &mmv MOVE_UP    &mkp LCLK        &msc SCRL_DOWN    &kp C_BRI_MIN  &kp C_BRI_DN    &kp C_BRI_UP  &trans        &trans      &studio_unlock
&trans  &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &kp C_MUTE     &kp C_VOL_DN    &kp C_VOL_UP  &kp C_PREV    &kp C_NEXT  &kp PRINTSCREEN
&trans  &kp LMETA  &kp LALT        &kp LCTRL       &kp LSHFT        &trans            &bt BT_CLR     &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &trans      &out OUT_TOG
                                   &trans          &trans           &trans            &kp C_PP       &studio_unlock  &trans
            >;
        };

        raise_layer {
            display-name = "Raise";
            bindings = <
&kp TAB            &kp LBKT   &kp N7  &kp N8                &kp N9              &kp RBKT     &kp HOME    &kp PG_DN  &kp PG_UP   &kp END      &kp INS     &kp BACKSPACE
&kp LEFT_SHIFT     &kp GRAVE  &kp N4  &hml LEFT_CONTROL N5  &hml LEFT_SHIFT N6  &kp EQUAL    &kp LEFT    &kp DOWN   &kp UP      &kp RIGHT    &trans      &kp DEL
&kp RIGHT_CONTROL  &kp N0     &kp N1  &kp N2                &kp N3              &kp BSLH     &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO  &kp RSHFT
                                      &trans                &kp N0              &kp MINUS    &trans      &trans     &trans
            >;
        };

        inter_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &to 0   &to 1   &to 2   &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            display-name = "CHOOSE";
        };
    };
};
